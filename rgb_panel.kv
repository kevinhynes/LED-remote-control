#:import Window kivy.core.window


<ToggleTray>:
    size_hint: (1, None)
    height: dp(50)
#    canvas:
#        Color:
#            rgba: 0, 0, 0, 0.2
#        Line:
#            rounded_rectangle: self.x, self.y, self.width, self.height, dp(10), dp(10)
    MDLabel:
        size_hint: (0.2, None)
        height: dp(15)
        pos_hint: {'top': 1}
        text: 'TEST'
        md_bg_color: (0.2, 0.7, 0.2, 0.1)
    MDIconButton:
        id: toggle_btn_
        size_hint: (None, None)
        size: (dp(40), dp(40))
        pos_hint: {'top': 1, 'right': 1}
        icon: 'chevron-down'
        _no_ripple_effect: True
        on_release: root.toggle()


<RGBPanelTray>:
    panel: panel_
    RGBPanel:
        id: panel_
        top: root.y


<RGBPanel>:
    orientation: 'vertical'
    adaptive_height: True
#    pos_hint: {'bottom': 0}
#    size_hint: (1, None)
#    height: sum(child.height for child in self.children)
#    md_bg_color: (1, 0, 0, 0.25)
    RGBSlidersTray:
        md_bg_color: (1, 0, 0, 0.25)
    MDSeparator:
    RGBPresetsTray:
        md_bg_color: (0, 1, 0, 0.25)
    MDSeparator:
    PaletteBuilderTray:
        md_bg_color: (0, 0, 1, 0.25)


<RGBSlidersTray>:
    panel: panel_
    RGBSliderBox:
        id: panel_

<RGBPresetsTray>:
    panel: panel_
    RGBPresetsBox:
        id: panel_

<PaletteBuilderTray>:
    panel: panel_
    PaletteBuilder:
        id: panel_


<RGBSliderBox>:
    orientation: 'vertical'
    adaptive_height: True
    x: Window.width
    RGBSlider:
        id: r_slider_
        color: (0.8, 0, 0, 0.75)
        thumb_color_active: (0.8, 0, 0, 0.75)
        thumb_color_inactive: (0.8, 0, 0, 0.75)
        thumb_color_disabled: (0.8, 0, 0, 0.75)
    RGBSlider:
        id: g_slider_
        color: (0, 0.8, 0, 0.75)
        thumb_color_active: (0, 0.8, 0, 0.75)
        thumb_color_inactive: (0, 0.8, 0, 0.75)
        thumb_color_disabled: (0, 0.8, 0, 0.75)
    RGBSlider:
        id: b_slider_
        color: (0, 0, 0.8, 0.75)
        thumb_color_active: (0, 0, 0.8, 0.75)
        thumb_color_inactive: (0, 0, 0.8, 0.75)
        thumb_color_disabled: (0, 0, 0.8, 0.75)


<RGBSlider@MDSlider>:
    size_hint: (1, None)
    height: dp(50)
    hint: False
    show_off: False
    min: 0
    max: 255
    step: 1
    value: 255


<RGBPresetsBox>:
    cols: 5
    adaptive_size: True
    padding: dp(10)
    spacing: dp(5)
    x: Window.width

<ColorPresetButton@MDRoundFlatButton>:
    size_hint: (None, None)
    size: (dp(40), dp(40))
    rounded_button: True
    canvas.before:
        Color:
            rgba: 0, 0, 0, 0.2  # Shadow color (adjust opacity as needed)
        Ellipse:
            pos: self.x + dp(2), self.y - dp(2)  # Adjust shadow position
            size: self.width, self.height
    canvas.after:
        Color:
            rgba: 0, 0, 0, 0.2
        Ellipse:
            pos: self.x, self.y
            size: self.width, self.height
        Color:
            # Previously added via Python, now gets added via .kv...
            rgba: self.md_bg_color if self.md_bg_color else (1, 1, 1, 1)
        Ellipse:
            pos: self.x, self.y + dp(3)
            size: self.width- dp(3), self.height - dp(3)


<PaletteBuilder>:
    orientation: 'lr-tb'
    spacing: dp(10)
#    x: Window.width
    MDBoxLayout:
        id: palette_colors_
        size_hint: (0.75, 0.4)
#    MDIconButton:
#        id: save_btn_
#        icon: 'content-save-move-outline'
#        size_hint: (0.2, 0.4)
    MDGridLayout:
        id: other_buttons_
        size_hint: (1, 0.4)




<ControlSlider@MDSlider>:
    size_hint: (0.9, None)
    height: dp(50)
    pos_hint: {'center_x': 0.5}
    hint: False
    canvas:
        Color:
            rgba: 0, 0, 0, 0.2
        Line:
            rounded_rectangle: self.x, self.y, self.width, self.height, dp(10), dp(10)

<ControlLabel@MDLabel>:
    size_hint: (0.8, None)
    pos_hint: {'center_x': 0.5}
    height: dp(15)
    font_size: sp(10)
    font_style: 'Overline'
    halign: 'left'
    valign: 'bottom'


<ControlSeparator@MDSeparator>:
    size_hint_x: 0.95
    pos_hint: {'center_x': 0.5}
    height: dp(4)
    canvas:
        Color:
            rgba: (0, 0, 0, 0.5)
        Rectangle:
            pos: (self.x, self.y + dp(2))
            size: self.width, self.height - dp(2)